[
  {
    "subsystem": "vm",
    "description": "Core functionality provided by the VM that isn't related to any kind of I/O.",
    "syscalls": [
      {
        "name": "memcpy",
        "args": [
          [
            "u8*",
            "dst"
          ],
          [
            "const u8*",
            "src"
          ],
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 3,
        "description": "Copy a block of memory in the heap from a source address to a destination address."
      },
      {
        "name": "memset",
        "args": [
          [
            "u8*",
            "dst"
          ],
          [
            "u8",
            "value"
          ],
          [
            "u64",
            "num_bytes"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 4,
        "description": "Fill a block of bytes in the heap with a given value."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "io",
    "description": "Stream I/O functionality.",
    "syscalls": [
      {
        "name": "print_i64",
        "args": [
          [
            "i64",
            "val"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 5,
        "description": "Print an i64 value to standard output."
      },
      {
        "name": "print_str",
        "args": [
          [
            "const char*",
            "str"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 6,
        "description": "Print a string to standard output."
      },
      {
        "name": "print_endl",
        "args": [],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 7,
        "description": "Print a newline to standard output."
      },
      {
        "name": "read_i64",
        "args": [],
        "returns": [
          "i64",
          "val"
        ],
        "permission": "default_allowed",
        "const_idx": 8,
        "description": "Read an i64 value from standard input."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "time",
    "description": "Date, time and timing related system calls.",
    "syscalls": [
      {
        "name": "time_current_ms",
        "args": [],
        "returns": [
          "u64",
          "timestamp"
        ],
        "permission": "time_get_time",
        "const_idx": 0,
        "description": "Get the UNIX time stamp in milliseconds."
      },
      {
        "name": "time_delay_cb",
        "args": [
          [
            "u64",
            "delay_ms"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "default_allowed",
        "const_idx": 2,
        "description": "Schedule a callback to be called once after a given delay."
      }
    ],
    "constants": []
  },
  {
    "subsystem": "window",
    "description": "Functionality related to creating windows, drawing graphics, as well as mouse and keyboard input.",
    "syscalls": [
      {
        "name": "window_create",
        "args": [
          [
            "u32",
            "width"
          ],
          [
            "u32",
            "height"
          ],
          [
            "const char*",
            "title"
          ],
          [
            "u64",
            "flags"
          ]
        ],
        "returns": [
          "u32",
          "window_id"
        ],
        "permission": "window_display",
        "const_idx": 1,
        "description": "Create a new window with a frame buffer to draw into."
      },
      {
        "name": "window_draw_frame",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "const u8*",
            "pixel_data"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 10,
        "description": "Copy a frame of pixels to be displayed into the window. The frame must have the same width and height as the window. The pixel format is 32 bits per pixel in BGRA byte order, with 8 bits for each component and the B byte at the lowest address."
      },
      {
        "name": "window_on_mousemove",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 11,
        "description": "Register a callback for mouse movement."
      },
      {
        "name": "window_on_mousedown",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 12,
        "description": "Register a callback for mouse button press events."
      },
      {
        "name": "window_on_mouseup",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 13,
        "description": "Register a callback for mouse button release events."
      },
      {
        "name": "window_on_keydown",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 9,
        "description": "Register a callback for key press event."
      },
      {
        "name": "window_on_keyup",
        "args": [
          [
            "u32",
            "window_id"
          ],
          [
            "void*",
            "callback"
          ]
        ],
        "returns": [
          "void",
          ""
        ],
        "permission": "window_display",
        "const_idx": 15,
        "description": "Register a callback for key release event."
      }
    ],
    "constants": [
      [
        "KEY_BACKSPACE",
        "u16",
        8
      ],
      [
        "KEY_TAB",
        "u16",
        9
      ],
      [
        "KEY_ENTER",
        "u16",
        10
      ],
      [
        "KEY_ESCAPE",
        "u16",
        27
      ],
      [
        "KEY_SPACE",
        "u16",
        32
      ],
      [
        "KEY_NUM0",
        "u16",
        48
      ],
      [
        "KEY_A",
        "u16",
        65
      ],
      [
        "KEY_B",
        "u16",
        66
      ],
      [
        "KEY_C",
        "u16",
        67
      ],
      [
        "KEY_D",
        "u16",
        68
      ],
      [
        "KEY_S",
        "u16",
        83
      ],
      [
        "KEY_W",
        "u16",
        87
      ],
      [
        "KEY_LEFT",
        "u16",
        16001
      ],
      [
        "KEY_RIGHT",
        "u16",
        16002
      ],
      [
        "KEY_UP",
        "u16",
        16003
      ],
      [
        "KEY_DOWN",
        "u16",
        16004
      ]
    ]
  },
  {
    "subsystem": "audio",
    "description": "Audio input and output.",
    "syscalls": [],
    "constants": []
  },
  {
    "subsystem": "fs",
    "description": "File I/O and filesystem-related functionality. This subsystem is separated out from the general-purpose io subsystem for security reasons.",
    "syscalls": [],
    "constants": []
  },
  {
    "subsystem": "net",
    "description": "Network-related functionality.",
    "syscalls": [],
    "constants": []
  }
]